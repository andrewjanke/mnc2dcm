#! /usr/bin/env perl
#
# A simple MINC to Dicom converter
#
# Copyright Andrew Janke - a.janke@gmail.com
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appear in all copies.  The
# author makes no representations about the suitability of this software
# for any purpose.  It is provided "as is" without express or implied warranty.


#use strict;
use warnings "all";
use Getopt::Long;
use Pod::Usage;
use File::Basename;
use File::Temp qw/ tempdir /;
use Cwd;

use DICOM;
use DICOM::Fields;
use DICOM::Element;

# until I get organised and do this properly
my $PACKAGE = &basename($0);
my $VERSION = '1.0.0';
my $PACKAGE_BUGREPORT = '"Andrew Janke" <a.janke@gmail.com>';

my($me, %opt, @command, $script);

$me = &basename($0);
%opt = (
   verbose => 0,
   fake => 0,
   man => 0,
   help => 0,
   );

# Get the history string
chomp($history = `date`);
$history .= '>>>> ' . join(' ', $me, @ARGV) . "\n";

# Check arguments
&GetOptions(
   'help|?' => \$opt{'help'},
   'man' => \$opt{'man'},
   'v|verbose' => \$opt{'verbose'},
   'version' => sub { &print_version_info },
   'f|fake' => \$opt{'fake'},
   ) or pod2usage(-verbose => 1) && exit;

# handle -man, -help or missing args
pod2usage(-verbose => 1) if $opt{help};
pod2usage(-exitstatus => 0, -verbose => 2) if $opt{man};
pod2usage(-verbose => 0) && exit if ($#ARGV != 1);

# get arguments
$infile = $ARGV[0];
$outdir = $ARGV[1];


#$hash = sdbm_hash("this is some text");
#print "HASH: $hash\n";
#exit;

# set up tmpdir
$opt{tmpdir} = &tempdir( "$me-XXXXXXXX", TMPDIR => 1, CLEANUP => 1 );

# initialise the dictionary using defaults
foreach my $line (@dicom_fields) {
   next if ($line =~ /^\#/);
   my ($group, $elem, $code, $numa, $name) = split(/\s+/, $line);
   my @lst = ($code, $name);
   $dict{$group}{$elem} = [@lst];
   }

# check for infile
if(!-e $infile){
   die "$me: Couldn't find input file: $infile\n\n";
   }

# make outdir if it doesn't exist
if(!-e $outdir){
   &do_cmd('mkdir', '-p', $outdir);
   }

# reshape the image to zyx
print STDOUT "+ Reshaping $infile to zyx +dir\n";
&do_cmd('mincreshape', '-clobber',
        '-dimorder', 'zspace,yspace,xspace',
        '+direction',
        '-dimsize', 'xspace=-1',
        '-dimsize', 'yspace=-1',
        '-dimsize', 'zspace=-1',
        $infile, "$opt{'tmpdir'}/res.mnc");


# create the dicom mess
my $d = DICOM->new();


# Dicom things (0002 group)
# MetaElementGroupLength
$d->{'0002'}{'0000'} = &create_element('0002', '0000', 111);

# FileMetaInformationVersion
$d->{'0002'}{'0001'} = &create_element('0002', '0001', "A\0");

# MediaStorageSOPClassUID
$d->{'0002'}{'0002'} = &create_element('0002', '0002', '1.2.840.10008.5.1.4.1.1.20');

# MediaStorageSOPInstanceUID
$d->{'0002'}{'0003'} = &create_element('0002', '0003', '777.777.0.0.0.1236118155.1523023229.3719989242.1124203223');

# TransferSyntaxUID - explicit VR little
$d->{'0002'}{'0010'} = &create_element('0002', '0010', '1.2.840.10008.1.2.1');

# ImplementationClassUID
$d->{'0002'}{'0012'} = &create_element('0002', '0012', '0.0.0.0');

# ImplementationVersionName
$d->{'0002'}{'0013'} = &create_element('0002', '0013', 'NOTSPECIFIED');

# SourceApplicationEntityTitle
$d->{'0002'}{'0016'} = &create_element('0002', '0016', 'NOTSPECIFIED');


# (0008 group)
# SpecificCharacterSet
$d->{'0008'}{'0005'} = &create_element('0008', '0005', 'ISO_IR 100');

# ImageType
$d->{'0008'}{'0008'} = &create_element('0008', '0008', 'DERIVED\PRIMARY\RECON TOMO\EMISSION');

# InstanceCreationDate
$d->{'0008'}{'0012'} = &create_element('0008', '0012', '20090303');

# InstanceCreationTime
$d->{'0008'}{'0013'} = &create_element('0008', '0013', '224555');

# InstanceCreatorUID
$d->{'0008'}{'0014'} = &create_element('0008', '0014', '777.777.0.0.0');

# SOPClassUID
$d->{'0008'}{'0016'} = &create_element('0008', '0016', '1.2.840.10008.5.1.4.1.1.20');

# SOPInstanceUID
$d->{'0008'}{'0018'} = &create_element('0008', '0018', '777.777.0.0.0.1236080755.2932837459.1440010230.3400850238');

# StudyDate
$d->{'0008'}{'0020'} = &create_element('0008', '0020', '');

# SeriesDate
$d->{'0008'}{'0021'} = &create_element('0008', '0021', '');

# AcquisitionDate
$d->{'0008'}{'0022'} = &create_element('0008', '0022', '');

# ImageDate
$d->{'0008'}{'0023'} = &create_element('0008', '0023', '');

# StudyTime
$d->{'0008'}{'0030'} = &create_element('0008', '0030', '000000');

# SeriesTime
$d->{'0008'}{'0031'} = &create_element('0008', '0031', '000000');

# AcquisitionTime
$d->{'0008'}{'0032'} = &create_element('0008', '0032', '000000');

# ImageTime
$d->{'0008'}{'0033'} = &create_element('0008', '0033', '000000');

# AccessionNumber
$d->{'0008'}{'0050'} = &create_element('0008', '0050', '1');

# Modality
$d->{'0008'}{'0060'} = &create_element('0008', '0060', 'NM');

# Manufacturer
$d->{'0008'}{'0070'} = &create_element('0008', '0070', '(X)MedCon');

# InstitutionName
$d->{'0008'}{'0080'} = &create_element('0008', '0080', 'UZGENT');

# ReferringPhysicianName
$d->{'0008'}{'0090'} = &create_element('0008', '0090', 'Unknown^^^^');

# StudyDescription
$d->{'0008'}{'1030'} = &create_element('0008', '1030', 'mnc2nii sml.mnc out.hdr');

# SeriesDescription
$d->{'0008'}{'103E'} = &create_element('0008', '103E', 'Unknown');

# OperatorName
$d->{'0008'}{'1070'} = &create_element('0008', '1070', 'Unknown');

# DerivationDescription
$d->{'0008'}{'2111'} = &create_element('0008', '2111', '(X)MedCon 0.10.4 by Erik Nolf');


# (0010 group)
# Patient Name, ID, BirthDate, Sex
$d->{'0010'}{'0010'} = &create_element('0010', '0010', "JOHN^DOE");
$d->{'0010'}{'0020'} = &create_element('0010', '0020', "PatientID");
$d->{'0010'}{'0030'} = &create_element('0010', '0030', "19990101");
$d->{'0010'}{'0040'} = &create_element('0010', '0040', "M");


# Study, Series, Acquisition, Image Date
$d->{'0008'}{'0020'} = &create_element('0008', '0020', "20081210");
$d->{'0008'}{'0021'} = &create_element('0008', '0021', "20081210");
$d->{'0008'}{'0022'} = &create_element('0008', '0022', "20081210");
$d->{'0008'}{'0023'} = &create_element('0008', '0023', "20081210");

# Series time
$d->{'0008'}{'0031'} = &create_element('0008', '0031', "1200");

# Sequence name
$d->{'0018'}{'1030'} = &create_element('0018', '1030', "fMRI-test");

# Image Comment
$d->{'0020'}{'4000'} = &create_element('0020', '4000', "Created by $me ($VERSION)");

# StudyID, SeriesNumber, AcquisitionNumber
$d->{'0020'}{'0010'} = &create_element('0020', '0010', 1);
$d->{'0020'}{'0011'} = &create_element('0020', '0011', 1);
$d->{'0020'}{'0012'} = &create_element('0020', '0012', 1);


# Get sizes
@args = ('mincinfo',
         '-error_string', 0,
         '-dimlength', 'xspace',
         '-dimlength', 'yspace',
         '-dimlength', 'zspace',
         "$opt{'tmpdir'}/res.mnc");
$args = join(' ', @args);
@data = split(/\n/, `$args`);
($xsize, $ysize, $zsize) = @data[0..2];

# set columns and rows
$d->{'0028'}{'0010'} = &create_element('0028', '0010', pack("S", $xsize));
$d->{'0028'}{'0011'} = &create_element('0028', '0011', $ysize);

# PixelSpacing
$d->{'0028'}{'0030'} = &create_element('0028', '0030', "1.0\1.0");


# SamplesPerPixel
$d->{'0028'}{'0002'} = &create_element('0028', '0002', 1);

# PixelRepresentation
$d->{'0028'}{'0103'} = &create_element('0028', '0103', 0);

# BitsAllocated, BitsStored, HighBit
$d->{'0028'}{'0100'} = &create_element('0028', '0100', 16);
$d->{'0028'}{'0101'} = &create_element('0028', '0101', 16);
$d->{'0028'}{'0102'} = &create_element('0028', '0102', 15);


# first create the required elements (setting to null and/or 0)
$d->{'0020'}{'0013'} = &create_element('0020', '0013', 0);

# ImagePosition
#$d->{'0020'}{'0030'} = &create_element('0020', '0030', 0);

# ImagePositionPatient
#$d->{'0020'}{'0032'} = &create_element('0020', '0032', 0);

# PixelData
$d->{'7FE0'}{'0010'} = &create_element('7FE0', '0010', 0);


$size = &calc_size($d);

$d->setElementValue('0002', '0000', $size);
print STDOUT "Total size: $size\n";

# for each slice
foreach $s (0..($zsize-1)){

   $outfile = "$outdir/$s.dcm";

   print STDOUT "  | Working on slice $s\n";

   # set the image number
   $d->setElementValue('0020', '0013', $s, );

   # ImagePositionPatient
   $args = "voxeltoworld $opt{'tmpdir'}/res.mnc $s " .
           (($ysize-1)/2) .
           ' ' .
           (($zsize-1)/2);
   chomp($buf = `$args`);
   $buf =~ s/\ /\,\ /g;

   print "BUF = $buf\n\n";
#   $d->setElementValue('0020', '0032', $buf);

   # get and set the slice
   $data = `mincextract -short -start $s,0,0 -count 1,$ysize,$xsize $opt{'tmpdir'}/res.mnc`;
   $d->{'7FE0'}{'0010'}->{'length'} = 2 * $xsize * $ysize;
   $d->{'7FE0'}{'0010'}->{'value'} = $data;

   # write this slice out
   $d->write($outfile);
   }

# debug rooting
#$d->fill("minimal.dcm");

print "CONTENTS: \n";
$d->printContents();

# sub sdbm - hashing function from here:
#   http://www.cse.yorku.ca/~oz/hash.html
sub sdbm_hash {
   my ($input) = @_;

   my ($c, $hash);

   print "$input - ($#input)\n";

   $hash = 0;
   foreach $c (0..length($input)){

      $hash = int(substr($input, $c, 1)) + ($hash << 6) + ($hash << 16) - $hash;
      }

   return $hash;
   }


# count total size of elements
sub calc_size {
   my ($d) = @_;
   my(%hash, $gp, $el, $size);

   %hash = %$d;

   $size = 0;
#   foreach $gp (keys(%hash)){
   foreach $gp ('0002', '0008'){
      foreach $el (keys(%{$hash{$gp}})){
         $size += $hash{$gp}{$el}->{'length'};
         print STDOUT "SIZE: ($gp,$el) " . $hash{$gp}{$el}->{'length'} . "    $size\n";
         }

      }

   return $size;
   }


# create and element, fill in the missing bits
# from the dictionary and set its value
sub create_element {

   ($gr, $el, $val) = @_;

   # create the new element
   my $n = DICOM::Element->new();

   # set the group and element ids
   $n->{'group'} = $gr;
   $n->{'element'} = $el;

   # get the element type and name from the data dictionary
   ($n->{'code'}, $n->{'name'}) = @{$dict{$gr}{$el}};

   # set the offset to zero for now
   $n->{'offset'} = 0;

   # set the value
   $n->setValue($val);

   return $n;
   }


sub do_cmd {
   print STDOUT "@_\n" if $opt{verbose};
   if(!$opt{fake}){
      system(@_) == 0 or die;
      }
   }

sub print_version_info {
   print STDOUT "\n$PACKAGE version $VERSION\n".
                "Comments to $PACKAGE_BUGREPORT\n\n";
   exit;
   }


__END__

=head1 NAME

B<mnc2dcm> - simple MINC to Dicom converter

=head1 SYNOPSIS

B<mnc2dcm> [options] in.mnc out_base

mnc2dcm should work to convert 3D MINC volumes to Dicom "format". By
Dicom format I mean as much to spec as possible. Mind you this in
NO WAY means that you will be able to re-import these images into some
scanner interface as most of these have their own addittions to Dicom
that are rarely compatible with each other. So yes your images
might be importable into such scanner interfaces but also might not.

They should however be easily readable with Dicom viewers such as Osirix,
Sante Dicom Viewer and ImageJ (three of the viewers on which the output
of mnc2dcm has been tested).

   $ mnc2dcm <in.mnc> <outdir>

=head1 DESCRIPTION

B<mnc2dcm> is a bit of a hack really though as all it does is call ...

 eg:
    $ mnc2dcm <in.mnc> <outdir>

Problems or comments should not be sent to: a.janke@gmail.com

Note that I (Andrew) am really not all that interested in maintaining things
that pertain to DICOM as it seems to be a constantly moving target. But hey
you can still email and you might just get lucky, I might be having a good day.

=head1 OPTIONS

=over 4

=item B<-v>, B<--verbose>

Be noisy when doing things (most importantly this will echo the resulting script to the terminal)

=item B<--version>

Print version number and exit

=item B<-h>, B<--help>

Dump some quick help output

=item B<--man>

Dump a man page

=item B<-f>, B<--fake>

Do a dry run. This is usually only useful if combined with --verbose so that you can see what is going on.

=back

=head1 SEE ALSO

dconvert(1)

=head1 AUTHOR

Andrew Janke - a.janke@gmail.com

=cut
